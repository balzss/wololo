{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","audio","Audio","remix","useState","isPlaying","setIsPlaying","showRed","setShowRed","clickCounter","setClickCounter","playSound","prev","play","useEffect","className","src","alt","onClick","setTimeout","animationDuration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MA4EeA,MAtEf,WACE,IAAMC,EAAQ,IAAIC,MAAM,sBAClBC,EAAQ,IAAID,MAAM,sBACxB,EAAkCE,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMC,EAAY,WACZN,GAAaI,GAVD,IAWhBC,GAAgB,SAACE,GAAD,OAAUA,EAAO,KACjCX,EAAMY,SASR,OANAC,qBAAU,WAfQ,IAgBZL,GACFN,EAAMU,SAEP,CAACJ,IAGF,sBAAKM,UAAS,cAASN,GAtBP,EAsBqC,WAAa,IAAlE,UACE,qBAAKM,UAAU,SAAf,SACE,qBAAKC,IAAI,iBAAiBC,IAAI,OAE/BR,EA1Ba,EA2BZ,qBAAKM,UAAU,gBAAf,SACGR,EACC,qBACEW,QAAS,WACPP,IACAL,GAAa,GACba,YAAW,WACTb,GAAa,GACbE,GAAW,KApCH,OA8Bd,SAUGH,EACC,qBAAKW,IAAI,2BAA2BD,UAAU,WAAWE,IAAI,SAE7D,qBAAKD,IAAI,kBAAkBD,UAAU,WAAWE,IAAI,WAIxD,qBAAKC,QAAS,WACZP,IACAL,GAAa,GACba,YAAW,WACTb,GAAa,GACbE,GAAW,KACVY,OANL,SASGf,EACC,qBAAKW,IAAI,2BAA2BD,UAAU,WAAWE,IAAI,SAE7D,qBAAKD,IAAI,mBAAmBD,UAAU,WAAWE,IAAI,aAM7D,qBAAKF,UAAU,sBAAf,SACE,qBAAKC,IAAI,eAAeD,UAAU,WAAWE,IAAI,eCzD5CI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.366b5577.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nconst animationDuration = 2650;\nconst targetCount = 5;\n\nfunction App() {\n  const audio = new Audio(\"./wololo-sound.mp3\");\n  const remix = new Audio(\"./wololo-remix.mp3\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [showRed, setShowRed] = useState(false);\n  const [clickCounter, setClickCounter] = useState(0);\n\n  const playSound = () => {\n    if (isPlaying || clickCounter >= targetCount) return;\n    setClickCounter((prev) => prev + 1);\n    audio.play();\n  };\n\n  useEffect(() => {\n    if (clickCounter === targetCount) {\n      remix.play();\n    }\n  }, [clickCounter]);\n\n  return (\n    <div className={`App ${clickCounter >= targetCount ? 'zoom-out' : ''}`}>\n      <div className=\"bg-img\">\n        <img src=\"./aoe1-bg.jpeg\" alt=\"\" />\n      </div>\n      {clickCounter < targetCount ? (\n        <div className=\"gif-container\">\n          {showRed ? (\n            <div\n              onClick={() => {\n                playSound();\n                setIsPlaying(true);\n                setTimeout(() => {\n                  setIsPlaying(false);\n                  setShowRed(false);\n                }, animationDuration);\n              }}\n            >\n              {isPlaying ? (\n                <img src=\"./wololo-red-to-blue.gif\" className=\"App-logo\" alt=\"logo\" />\n              ) : (\n                <img src=\"./red-still.gif\" className=\"App-logo\" alt=\"logo\" />\n              )}\n            </div>\n          ) : (\n            <div onClick={() => {\n              playSound();\n              setIsPlaying(true);\n              setTimeout(() => {\n                setIsPlaying(false);\n                setShowRed(true);\n              }, animationDuration - 100);\n            }}\n            >\n              {isPlaying ? (\n                <img src=\"./wololo-blue-to-red.gif\" className=\"App-logo\" alt=\"logo\" />\n              ) : (\n                <img src=\"./blue-still.gif\" className=\"App-logo\" alt=\"logo\" />\n              )}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"dance-gif-container\">\n          <img src=\"./wololo.gif\" className=\"App-logo\" alt=\"logo\" />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}